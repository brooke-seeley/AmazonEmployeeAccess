
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.2     ✔ tibble    3.3.0
✔ lubridate 1.9.4     ✔ tidyr     1.3.1
✔ purrr     1.1.0     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.4.1 ──
✔ broom        1.0.10     ✔ rsample      1.3.1 
✔ dials        1.4.2      ✔ tailor       0.1.0 
✔ infer        1.0.9      ✔ tune         2.0.0 
✔ modeldata    1.5.1      ✔ workflows    1.3.0 
✔ parsnip      1.3.3      ✔ workflowsets 1.1.1 
✔ recipes      1.3.1      ✔ yardstick    1.3.2 
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> library(embed)
> library(glmnet)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Loaded glmnet 4.1-10
> 
> ## Read in Training Data
> 
> trainData <- vroom('train.csv') %>%
+   mutate(ACTION = factor(ACTION))
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> ## Read in Test Data
> 
> testData <- vroom('test.csv')
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> #####
> 
> # ## EDA
> #
> # library(ggplot2)
> # library(ggmosaic)
> # library(forcats)
> # 
> # trainData_plot <- trainData_plot %>%
> #   mutate(ROLE_DEPTNAME = fct_lump_n(factor(ROLE_DEPTNAME), 10),
> #          ACTION = factor(ACTION),
> #          RESOURCE = fct_lump_n(factor(RESOURCE), 10))
> # 
> # ggplot(trainData_plot, aes(x = ROLE_DEPTNAME, fill = ACTION)) +
> #   geom_bar(position = "fill")
> # 
> # ggplot(trainData_plot, aes(x = RESOURCE, fill = ACTION)) +
> #   geom_bar(position = "fill")
> 
> #####
> 
> ## Recipe with Dummy Variables
> 
> # amazon_recipe <- recipe(ACTION ~ ., data = trainData) %>%
> #   step_mutate_at(all_numeric_predictors(), fn = factor) %>% 
> #   step_other(all_factor_predictors(), threshold = 0.001) %>%
> #   step_dummy(all_factor_predictors())
> # 
> # prep <- prep(amazon_recipe)
> # baked <- bake(prep, new_data = trainData)
> 
> #####
> 
> ## Recipe with Target Encoding
> 
> target_recipe <- recipe(ACTION ~ ., data = trainData) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% 
+   step_other(all_factor_predictors(), threshold = 0.001) %>%
+   step_lencode_mixed(all_factor_predictors(), outcome = vars(ACTION)) %>%
+   step_normalize(all_factor_predictors())
> 
> target_prep <- prep(target_recipe)
> bake(target_prep, new_data = trainData)
# A tibble: 32,769 × 10
   RESOURCE MGR_ID ROLE_ROLLUP_1 ROLE_ROLLUP_2 ROLE_DEPTNAME ROLE_TITLE
      <dbl>  <dbl>         <dbl>         <dbl>         <dbl>      <dbl>
 1    -2.72  -5.33         -2.93         -3.08         -3.18      -3.40
 2    -2.72  -2.76         -2.93         -3.43         -2.19      -3.27
 3    -2.72  -2.76         -2.46         -2.47         -2.50      -2.10
 4    -2.72  -5.39         -2.93         -3.43         -4.19      -2.45
 5    -2.72  -2.76         -2.62         -2.07         -1.36      -2.05
 6    -2.72  -2.76         -2.67         -2.67         -2.13      -2.53
 7    -3.03  -2.76         -2.93         -3.43         -2.41      -2.60
 8    -2.72  -2.76         -2.93         -2.56         -3.26      -2.75
 9    -2.72  -2.76         -2.93         -3.28         -3.10      -2.38
10    -2.72  -2.76         -1.51         -1.53         -2.72      -2.10
# ℹ 32,759 more rows
# ℹ 4 more variables: ROLE_FAMILY_DESC <dbl>, ROLE_FAMILY <dbl>,
#   ROLE_CODE <dbl>, ACTION <fct>
> 
> #####
> 
> # ## Logistic Regression Model
> # 
> # log_reg_model <- logistic_reg() %>%
> #   set_engine("glm")
> # 
> # ### Workflow
> # 
> # log_reg_workflow <- workflow() %>%
> #   add_recipe(amazon_recipe) %>%
> #   add_model(log_reg_model) %>%
> #   fit(data=trainData)
> # 
> # ### Predictions
> # 
> # log_reg_predictions <- predict(log_reg_workflow,
> #                                new_data=testData,
> #                                type="prob")
> # 
> # ### Kaggle
> # 
> # log_reg_kaggle_submission <- log_reg_predictions %>%
> #   bind_cols(., testData) %>%
> #   select(id, .pred_1) %>% 
> #   rename(Action=.pred_1) %>%
> #   rename(Id=id)
> # 
> # vroom_write(x=log_reg_kaggle_submission, file="./LogRegPreds.csv", delim=',')
> 
> #####
> 
> ### Penalized Logistic Regression
> 
> preg_mod <- logistic_reg(mixture=tune(), penalty=tune()) %>%
+   set_engine("glmnet")
> 
> preg_workflow <- workflow() %>%
+   add_recipe(target_recipe) %>%
+   add_model(preg_mod)
> 
> ### Grid of values to tune over
> 
> tuning_grid <- grid_regular(penalty(),
+                             mixture(),
+                             levels = 5)
> 
> ### Split data for CV
> 
> folds <- vfold_cv(trainData, v = 5, repeats = 1)
> 
> ### Run the CV
> 
> CV_results <- preg_workflow %>%
+   tune_grid(resamples=folds,
+             grid=tuning_grid,
+             metrics(metric_set(roc_auc)))
Warning message:
The `...` are not used in this function but 1 unnamed object was passed. 
> 
> ### Find Best Tuning Parameters
> 
> bestTune <- CV_results %>%
+   select_best(metric="roc_auc")
> print(bestTune)
# A tibble: 1 × 3
  penalty mixture .config         
    <dbl>   <dbl> <chr>           
1 0.00316     0.5 pre0_mod18_post0
> 
> ### Finalize the Workflow & fit it
> 
> final_wf <-
+   preg_workflow %>%
+   finalize_workflow(bestTune) %>%
+   fit(data=trainData)
> 
> ### Predict
> 
> pen_reg_predictions <- final_wf %>%
+   predict(new_data = testData, type="prob")
> 
> ### Kaggle
> 
> pen_reg_kaggle_submission <- pen_reg_predictions %>%
+   bind_cols(., testData) %>%
+   select(id, .pred_1) %>% 
+   rename(Action=.pred_1) %>%
+   rename(Id=id)
> 
> vroom_write(x=pen_reg_kaggle_submission, file="./PenRegPreds.csv", delim=',')
> 
> proc.time()
   user  system elapsed 
335.949   1.663 191.487 
